#!/bin/bash

TARDIR=$(dirname "$0")/templates

## Print usage message
usage() {
	echo "Usage: mkn [options] language name"
	echo
	echo "Options:"
	echo "    -h|--help     Display this help message"
	echo "    -l|--library  Use a library template"
	echo "    -t|--test     Add tests to the project"
	echo "    -g|--gtest    Add google tests to the project (for c/c++ only)"
}

## Clean the language string
clean_lang() {
	local LANG=$(echo "$1" | tr '[:upper:]' '[:lower:]')
	if [ "cpp" == "$LANG" ] || [ "c++" == "$LANG" ] || [ "cxx" == "$LANG" ]
	then
		echo "cpp"
	elif [ "python" == "$LANG" ] || [ "py" == "$LANG" ]
	then
		echo "py"
	else
		echo "$LANG"
	fi
}

## GetOpt parse
SHORT=hltg
LONG=help,lib,test,gtest
OPTS=$(getopt -o $SHORT --long $LONG --name "$0" -- "$@")

## Check for parse errors
if [ $? != 0 ]; then echo "Parsing failed, exiting." >&2; exit 1; fi

eval set -- "$OPTS"

## Read optional args
while true
do
	case "$1" in
		-h|--help) usage; exit 0;;
		-l|--lib|--library) LIB="lib"; shift;;
		-t|--test) TEST="test"; shift;;
		-g|--gtest) GTEST="gtest"; shift;;
		--) shift; break;;
		-*) echo "unknown option: $1" >&2; usage; exit 1;;
	esac
done

## Read positional args
PLANG=$(clean_lang "$1")
shift
NAME="$1"
shift

## Check that test and gtest are exclusive
if [ ! -z "$TEST" ] && [ ! -z "$GTEST" ]; then exit 1; fi

## Check for required positional arg
if [ -z "$PLANG" ]; then usage; exit 1; fi

## Check for optional positional arg
if [ -z "$NAME" ]
then
	# Use the current directory
	NAME=$(basename $(pwd))
else
	# Make project dir and move in
	mkdir -p $NAME
	cd $NAME
fi


## Check that a template exists
PTYPE=$PLANG$LIBS$TEST$GTEST
ARCHIVE=$TARDIR/$PTYPE
if [ ! -d "$ARCHIVE" ]; then echo "Unknown project type $PTYPE"; exit 1; fi

echo Making new project $NAME in $PLANG

## Check that we are not writing over a project
if [[ -f .mk ]]; then
	echo Project $NAME already exists!
	exit -1
fi

## Expand template into current workind directory
cp -r $ARCHIVE/* ./

## Run setup script if there is one
if [ -f ".mk" ]; then ./.mk; fi

## Void setup script / place project marker
echo "NAME=$NAME" > .mk
echo "PLANG=$PLANG" >> .mk
echo "ARCHIVE=$ARCHIVE" >> .mk

## Initialize git repo
git init
touch .gitignore
git add .
git commit -m "First Commit"

